package app.exploitr.bookway.adapters;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.fragment.app.FragmentActivity;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.SetOptions;

import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import app.exploitr.bookway.Objects.Order;
import app.exploitr.bookway.R;
import app.exploitr.bookway.databinding.RecyclerviewOrderListBinding;
import app.exploitr.bookway.functions.FDB;

public class BookedOrderAdapter extends RecyclerView.Adapter<BookedOrderAdapter.OrderHolder> {

	FragmentActivity mActivity;
	ArrayList<Order> mOrders;

	public BookedOrderAdapter(FragmentActivity activity, ArrayList<Order> orders) {
		mActivity = activity;
		mOrders = orders;
	}

	@NonNull
	@NotNull
	@Override
	public OrderHolder onCreateViewHolder(@NonNull @NotNull ViewGroup parent, int viewType) {
		return new OrderHolder(LayoutInflater.from(parent.getContext())
				.inflate(R.layout.recyclerview_order_list, parent, false));

	}

	@Override
	public void onBindViewHolder(@NonNull @NotNull OrderHolder holder, int position) {
		RecyclerviewOrderListBinding bindingX = holder.binding;
		Order order = mOrders.get(position);
		Calendar calendar = Calendar.getInstance();

		bindingX.orderHotelName.setText(order.getHotel_name());

		calendar.setTimeInMillis(order.getCheck_in());
		bindingX.orderHotelCheckIn.setText("Check-in : " + calendar.get(Calendar.DAY_OF_MONTH) + "th" + monthName(calendar.get(Calendar.MONTH))
				+ " " + calendar.get(Calendar.HOUR_OF_DAY) + ":" + calendar.get(Calendar.MINUTE));

		calendar.setTimeInMillis(order.getCheck_out());
		bindingX.orderHotelCheckOut.setText("Check-out : " + calendar.get(Calendar.DAY_OF_MONTH) + "th" + monthName(calendar.get(Calendar.MONTH))
				+ " " + calendar.get(Calendar.HOUR_OF_DAY) + ":" + calendar.get(Calendar.MINUTE));

		bindingX.orderHotelRoomAdult.setText(order.getAdult_bed() + " Adult Beds");
		bindingX.orderHotelRoomChild.setText(order.getChild_bed() + " Child Beds");

		bindingX.orderHotelRoomPrice.setText("INR " + order.getPrice_total() + " in total");
		bindingX.orderHotelRoomStatus.setText(FDB.status(order.getStatus()));

		if (order.getStatus() != FDB.STATUS_JUST_ORDERED) {
			bindingX.orderCancelHotel.setEnabled(false);
		}


		FDB.getFDS()
				.getReference()
				.child("categories")
				.child(order.getOrder_loc())
				.child(order.getImages_id())
				.child("1.jpg") // categorized - following naming system - must be existing according to the data structure
				.getDownloadUrl().addOnSuccessListener(uri -> Glide.with(mActivity)
				.load(uri)
				.into(bindingX.orderHotelRoomImages))
				.addOnFailureListener(e -> Toast.makeText(mActivity, "Failed to load hotel image.", Toast.LENGTH_SHORT).show());


		bindingX.orderCancelHotel.setOnClickListener(v -> {
			Map<String, Object> update = new HashMap<>();
			update.put("STATUS", FDB.STATUS_REQ_CANCELLATION);

			FDB.getFDB()
					.collection("users")
					.document(FirebaseAuth.getInstance().getUid())
					.collection("orders")
					.document("" + order.getOrder_id())
					.set(update, SetOptions.merge()).addOnSuccessListener(unused -> {
				Toast.makeText(mActivity, "Booking cancellation is requested! Wait for sometime.", Toast.LENGTH_SHORT).show();
				bindingX.orderHotelRoomStatus.setText("Cancellation Requested");
				BookedOrderAdapter.this.notifyDataSetChanged();
			}).addOnFailureListener(e -> Toast.makeText(mActivity, "Failed to request cancellation, retry.", Toast.LENGTH_SHORT).show());
		});
	}

	@Override
	public int getItemCount() {
		return mOrders.size();
	}

	private String monthName(int index) {
		String[] all = {"January", "February", "March", "April", "May", "June",
				"July", "August", "September", "October", "November", "December"};
		return all[index];
	}

	public static class OrderHolder extends RecyclerView.ViewHolder {

		RecyclerviewOrderListBinding binding;

		public OrderHolder(@NonNull @NotNull View itemView) {
			super(itemView);
			binding = RecyclerviewOrderListBinding.bind(itemView);
		}
	}
}
